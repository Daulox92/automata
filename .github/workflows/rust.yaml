name: Rust

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  SGX_SDK_URL: https://download.01.org/intel-sgx/sgx-linux/2.12/distro/ubuntu18.04-server/sgx_linux_x64_sdk_2.12.100.3.bin
  SGX_SDK_INSTALLER: /tmp/sgxsdk_installer
  SGX_SDK_DEST: /opt

jobs:
  format:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache-cargo
        with:
          # The paths are taken from
          # https://doc.rust-lang.org/nightly/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-
      - uses: actions/cache@v2
        id: cache-sgx
        with:
          path: |
            ${{ env.SGX_SDK_DEST }}/sgxsdk
          key: ${{ runner.os }}-sgx-${{ env.SGX_SDK_URL }}
      - name: Install Intel SGX SDK
        if: steps.cache-sgx.outputs.cache-hit != 'true'
        run: |
          curl -sSf ${SGX_SDK_URL} > ${SGX_SDK_INSTALLER}
          chmod +x ${SGX_SDK_INSTALLER}
          echo -e 'no\n${SGX_SDK_DEST}' | ${SGX_SDK_INSTALLER}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: wasm32-unknown-unknown
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --workspace

  test: 
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache-cargo
        with:
          # The paths are taken from
          # https://doc.rust-lang.org/nightly/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-
      - uses: actions/cache@v2
        id: cache-sgx
        with:
          path: |
            ${{ env.SGX_SDK_DEST }}/sgxsdk
          key: ${{ runner.os }}-sgx-${{ env.SGX_SDK_URL }}
      - name: Install Intel SGX SDK
        if: steps.cache-sgx.outputs.cache-hit != 'true'
        run: |
          curl -sSf ${SGX_SDK_URL} > ${SGX_SDK_INSTALLER}
          chmod +x ${SGX_SDK_INSTALLER}
          echo -e 'no\n${SGX_SDK_DEST}' | ${SGX_SDK_INSTALLER}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: wasm32-unknown-unknown
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace

  clippy:
    runs-on: ubuntu-18.04
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache-sgx
        with:
          path: |
            ${{ env.SGX_SDK_DEST }}/sgxsdk
          key: ${{ runner.os }}-sgx-${{ env.SGX_SDK_URL }}
      - name: Install Intel SGX SDK
        if: steps.cache-sgx.outputs.cache-hit != 'true'
        run: |
          curl -sSf ${SGX_SDK_URL} > ${SGX_SDK_INSTALLER}
          chmod +x ${SGX_SDK_INSTALLER}
          echo -e 'no\n${SGX_SDK_DEST}' | ${SGX_SDK_INSTALLER}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: clippy
          target: wasm32-unknown-unknown
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace -- -D warnings
